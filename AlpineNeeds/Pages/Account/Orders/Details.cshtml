@page "{id:int}"
@model AlpineNeeds.Pages.Account.Orders.DetailsModel
@{
    ViewData["Title"] = $"Order #{Model.Order?.Id} Details";
}

<div class="container py-4">
    <div class="row mb-4">
        <div class="col">
            <h2 class="border-bottom pb-3">Order Details</h2>
        </div>
    </div>

    @if (Model.Order == null)
    {
        <div class="alert alert-danger">
            Order not found.
        </div>
        return;
    }

    <!-- Order Status Timeline -->
    <div class="row mb-4">
        <div class="col">
            <div class="card">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Order Status</h5>
                </div>
                <div class="card-body">
                    <div class="progress-track">
                        <ul class="progressbar list-unstyled d-flex justify-content-between">
                            <li class="@(Model.Order.Status >= OrderStatus.Placed ? "active" : "")">
                                <span class="d-block">Placed</span>
                                <small class="text-muted">@(Model.Order.OrderDate.ToString("MMM dd, yyyy"))</small>
                            </li>
                            <li class="@(Model.Order.Status >= OrderStatus.Confirmed ? "active" : "")">
                                <span class="d-block">Confirmed</span>
                                @if (Model.Order.Status >= OrderStatus.Confirmed)
                                {
                                    <small class="text-muted">@(Model.Order.OrderDate.AddHours(2).ToString("MMM dd, yyyy"))</small>
                                }
                            </li>
                            <li class="@(Model.Order.Status >= OrderStatus.Preparing ? "active" : "")">
                                <span class="d-block">Preparing</span>
                                @if (Model.Order.Status >= OrderStatus.Preparing && Model.ShippingDate.HasValue)
                                {
                                    <small class="text-muted">@(Model.ShippingDate.Value.ToString("MMM dd, yyyy"))</small>
                                }
                            </li>
                            <li class="@(Model.Order.Status >= OrderStatus.Packed ? "active" : "")">
                                <span class="d-block">Packed</span>
                            </li>
                            <li class="@(Model.Order.Status >= OrderStatus.Delivered ? "active" : "")">
                                <span class="d-block">Delivered</span>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Sidebar: All My Orders -->
        <div class="col-md-3 mb-4">
            <div class="card h-100">
                <div class="card-header bg-light">
                    <h6 class="mb-0">All My Orders</h6>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush">
                        @foreach (var order in Model.UserOrders)
                        {
                            <a href="/Account/Orders/Details/@order.Id" class="list-group-item list-group-item-action @(order.Id == Model.Order.Id ? "active" : "")">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>Order #@order.Id</span>
                                    <span class="badge bg-secondary">@order.Status</span>
                                </div>
                                <small class="text-muted">@order.OrderDate.ToString("MMM dd, yyyy")</small>
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>
        <!-- Main Content: Order Details -->
        <div class="col-md-9">
            <!-- Order Information -->
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Order Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <div class="d-flex justify-content-between">
                                <span class="fw-bold">Order Number:</span>
                                <span>#@Model.Order.Id</span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <div class="d-flex justify-content-between">
                                <span class="fw-bold">Order Date:</span>
                                <span>@Model.Order.OrderDate.ToString("MMM dd, yyyy h:mm tt")</span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <div class="d-flex justify-content-between">
                                <span class="fw-bold">Status:</span>
                                <span class="badge @GetStatusBadgeClass(Model.Order.Status)">@Model.Order.Status</span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <div class="d-flex justify-content-between">
                                <span class="fw-bold">Payment Method:</span>
                                <span>Credit Card</span>
                            </div>
                        </div>
                        @if (Model.Order.Status >= OrderStatus.Packed && !string.IsNullOrEmpty(Model.TrackingNumber))
                        {
                            <div class="mb-3">
                                <div class="d-flex justify-content-between">
                                    <span class="fw-bold">Tracking Number:</span>
                                    <span>@Model.TrackingNumber</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <!-- Shipping Information -->
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Shipping Address</h5>
                    </div>
                    <div class="card-body">
                        <address>
                            @if (Model.Order.ShippingAddress != null)
                            {
                                <strong>@Model.Order.ShippingAddress.FullName</strong><br>
                                <span>@Model.Order.ShippingAddress.AddressLine1</span><br>
                                @if (!string.IsNullOrEmpty(Model.Order.ShippingAddress.AddressLine2))
                                {
                                    <span>@Model.Order.ShippingAddress.AddressLine2</span><br>
                                }
                                <span>@Model.Order.ShippingAddress.City, @Model.Order.ShippingAddress.State @Model.Order.ShippingAddress.ZipCode</span><br>
                                <span>@Model.Order.ShippingAddress.Country</span><br>
                                <abbr title="Phone">Phone:</abbr> @Model.Order.ShippingAddress.PhoneNumber
                            }
                            else
                            {
                                <strong>@(Model.Order.User?.FirstName) @(Model.Order.User?.LastName)</strong><br>
                                <strong>Shipping address not available</strong>
                            }
                        </address>
                    </div>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Order Summary</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal:</span>
                            <span>@Model.SubTotal.ToString("C")</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Shipping:</span>
                            <span>@Model.ShippingCost.ToString("C")</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Tax:</span>
                            <span>@Model.Tax.ToString("C")</span>
                        </div>
                        @if (Model.Discount > 0)
                        {
                            <div class="d-flex justify-content-between mb-2">
                                <span>Discount:</span>
                                <span class="text-success">-@Model.Discount.ToString("C")</span>
                            </div>
                        }
                        <hr>
                        <div class="d-flex justify-content-between mb-0">
                            <span class="fw-bold">Total:</span>
                            <span class="fw-bold">@Model.Order.TotalPrice.ToString("C")</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Order Items -->
    <div class="card mb-4">
        <div class="card-header bg-light">
            <h5 class="mb-0">Order Items</h5>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Product</th>
                            <th>Price</th>
                            <th>Quantity</th>
                            <th>Subtotal</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Order.OrderProducts)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        @{
                                            var imageUrl = item.Product.ProductImages.FirstOrDefault()?.ImageUrl ?? "/img/placeholder.jpg";
                                        }
                                        <img src="@imageUrl" alt="@item.Product.Name" class="img-thumbnail me-3" style="width: 60px; height: 60px; object-fit: cover;">
                                        <div>
                                            <a href="/Products/Details?id=@item.ProductId" class="text-decoration-none">
                                                <h6 class="mb-0">@item.Product.Name</h6>
                                            </a>
                                            @if (!string.IsNullOrEmpty(item.Color) || !string.IsNullOrEmpty(item.Size))
                                            {
                                                <small class="text-muted">
                                                    @if (!string.IsNullOrEmpty(item.Color))
                                                    {
                                                        <span>Color: @item.Color</span>
                                                    }
                                                    @if (!string.IsNullOrEmpty(item.Size))
                                                    {
                                                        <span>Size: @item.Size</span>
                                                    }
                                                </small>
                                            }
                                            <div>
                                                @if (item.Product.StockQuantity < item.Quantity)
                                                {
                                                    <span class="badge bg-danger">Out of Stock</span>
                                                }
                                                else if (item.Product.StockQuantity < 5)
                                                {
                                                    <span class="badge bg-warning text-dark">Low Stock</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-success">In Stock</span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td>@item.Price.ToString("C")</td>
                                <td>@item.Quantity</td>
                                <td>@((item.Price * item.Quantity).ToString("C"))</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="row">
        <div class="col-md-12 mb-4">
            <div class="d-flex gap-2">
                <form method="post" asp-page-handler="Reorder" asp-route-id="@Model.Order.Id">
                    <button type="submit" class="btn btn-primary" @(Model.AllItemsAvailableForReorder ? "" : "disabled")>
                        <i class="bi bi-cart-plus me-1"></i> Reorder
                    </button>
                </form>
                <a href="#" class="btn btn-outline-primary">
                    <i class="bi bi-headset me-1"></i> Contact Support
                </a>
                <a href="/Account/Orders" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left me-1"></i> Return to Orders
                </a>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Progress bar styling */
        .progress-track {
            margin-top: 20px;
            margin-bottom: 20px;
        }
        
        .progressbar {
            position: relative;
            padding-left: 0;
            counter-reset: step;
        }
        
        .progressbar li {
            list-style-type: none;
            font-size: 14px;
            text-align: center;
            width: 20%;
            position: relative;
        }
        
        .progressbar li:before {
            content: counter(step);
            counter-increment: step;
            width: 30px;
            height: 30px;
            line-height: 28px;
            border: 2px solid #ddd;
            border-radius: 50%;
            display: block;
            text-align: center;
            margin: 0 auto 10px auto;
            background-color: white;
            color: #ddd;
            z-index: 1;
            position: relative;
        }
        
        .progressbar li:after {
            content: "";
            position: absolute;
            width: 100%;
            height: 2px;
            background-color: #ddd;
            top: 15px;
            left: -50%;
            z-index: 0;
        }
        
        .progressbar li:first-child:after {
            content: none;
        }
        
        .progressbar li.active:before {
            border-color: #28a745;
            background-color: #28a745;
            color: white;
        }
        
        .progressbar li.active:after {
            background-color: #28a745;
        }
    </style>
}

@functions {
    string GetStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Placed => "bg-info",
            OrderStatus.Confirmed => "bg-primary",
            OrderStatus.Preparing => "bg-primary",
            OrderStatus.Packed => "bg-primary",
            OrderStatus.Delivered => "bg-success",
            OrderStatus.Finished => "bg-success",
            OrderStatus.CustomerCanceled => "bg-danger",
            OrderStatus.OutOfStock => "bg-danger",
            _ => "bg-secondary"
        };
    }
}
