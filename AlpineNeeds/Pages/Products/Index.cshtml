@page
@using System.Globalization
@model AlpineNeeds.Pages.Products.IndexModel
@{
    ViewData["Title"] = "Products";
}

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/14.7.0/nouislider.min.css" />
    <style>
        /* Product Card Styles */
        .product-card {
            transition: transform 0.3s, box-shadow 0.3s;
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0,0,0,0.1);
        }

        .product-img-container {
            position: relative;
            width: 100%;
            padding-bottom: 100%; /* Square aspect ratio */
            overflow: hidden;
        }

        .product-img {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .product-title {
            font-weight: 600;
            margin-top: 10px;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            height: 3em;
        }

        .in-stock {
            color: #28a745;
        }

        .out-of-stock {
            color: #dc3545;
        }

        /* Filter Sidebar Styles */
        .filter-sidebar {
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
        }

        /* Price Range Slider */
        .price-slider {
            margin: 15px 0;
        }

        .noUi-connect {
            background: #007bff;
        }

        .price-inputs {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
        }

        .price-inputs input {
            width: 45%;
        }

        /* Category Filter */
        .category-filter label {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }

        .category-count {
            margin-left: 5px;
            color: #6c757d;
            font-size: 0.9em;
        }

        /* Nested Categories */
        .nested-categories {
            margin-top: 10px;
        }

        .category-item {
            margin-bottom: 5px;
        }

        .category-toggle {
            background: none;
            border: none;
            color: #6c757d;
            cursor: pointer;
        }

        .category-toggle i {
            transition: transform 0.2s;
        }

        .category-toggle.collapsed i {
            transform: rotate(-90deg);
        }
        
        .subcategories {
            margin-top: 5px;
        }

        /* Mobile Filter Toggle */
        .filter-toggle {
            display: none;
        }

        /* Responsive design */
        @@media (max-width: 991px) {
            .filter-sidebar {
                margin-bottom: 20px;
            }

            .filter-toggle {
                display: block;
                margin-bottom: 15px;
            }

            #filterContent {
                display: none;
            }

            #filterContent.show {
                display: block;
            }
        }

        @@media (max-width: 767px) {
            .product-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @@media (max-width: 576px) {
            .product-grid {
                grid-template-columns: repeat(1, 1fr);
            }
        }
    </style>
}

<div class="container py-5">
    <h1 class="mb-4">Products</h1>

    <div class="row">
        <!-- Filter Sidebar (Left side) -->
        <div class="col-lg-3 mb-4">
            <div class="filter-sidebar">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="mb-0">Filters</h5>
                    <button id="toggleFilter" class="btn btn-sm btn-outline-secondary filter-toggle">
                        <span class="toggle-text">Show Filters</span>
                        <i class="fas fa-chevron-down"></i>
                    </button>
                    <button id="resetFilters" class="btn btn-sm btn-outline-danger">Reset All</button>
                </div>

                <div id="filterContent">
                    <form id="filterForm" method="get" data-ajax="true">
                        <!-- Hidden inputs to maintain current page state -->
                        <input type="hidden" name="PageIndex" value="1" />
                        <input type="hidden" name="SortBy" value="@Model.SortBy" />

                        <!-- Category Filter -->
                        <div class="category-filter mb-4">
                            <h6 class="font-weight-bold">Categories</h6>
                            <div class="nested-categories">
                                @await Html.PartialAsync("_CategoryHierarchyPartial", Model.CategoryHierarchy)
                            </div>
                        </div>

                        <!-- Price Range Filter -->
                        <div class="price-filter mb-4">
                            <h6 class="font-weight-bold">Price Range</h6>
                            <div class="price-slider" id="price-slider"></div>
                            <div class="price-inputs mt-2">
                                <div class="input-group input-group-sm">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">лв</span>
                                    </div>
                                    <input type="number" class="form-control" id="minPrice" name="MinPrice" value="@Model.MinPrice?.ToString(CultureInfo.InvariantCulture)">
                                </div>
                                <div class="mx-2">-</div>
                                <div class="input-group input-group-sm">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">лв</span>
                                    </div>
                                    <input type="number" class="form-control" id="maxPrice" name="MaxPrice" value="@Model.MaxPrice?.ToString(CultureInfo.InvariantCulture)">
                                </div>
                            </div>
                            <button type="button" class="btn btn-sm btn-primary mt-2 w-100" id="applyPriceFilter">
                                Apply Filter
                            </button>
                        </div>

                        <!-- Stock Filter -->
                        <div class="stock-filter mb-4">
                            <h6 class="font-weight-bold">Availability</h6>
                            <div class="form-check">
                                <input class="form-check-input filter-radio" type="radio" name="StockFilter" id="stockAll"
                                       value="All" @(Model.StockFilter != "InStock" ? "checked" : "") data-filter="stock">
                                <label class="form-check-label" for="stockAll">
                                    All Products
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input filter-radio" type="radio" name="StockFilter" id="stockInStock"
                                       value="InStock" @(Model.StockFilter == "InStock" ? "checked" : "") data-filter="stock">
                                <label class="form-check-label" for="stockInStock">
                                    In Stock Only
                                </label>
                            </div>
                        </div>

                        <!-- Brand Filter -->
                        <div class="brand-filter mb-4">
                            <h6 class="font-weight-bold">Brand</h6>
                            <div class="brand-list">
                                <div class="form-check">
                                    <input class="form-check-input brand-checkbox" type="checkbox" name="Brands" 
                                           id="brandAll" value="All" 
                                           @(string.IsNullOrEmpty(Model.Brand) || Model.Brand == "All" ? "checked" : "") 
                                           data-filter="brand" data-is-all="true">
                                    <label class="form-check-label" for="brandAll">
                                        All Brands
                                    </label>
                                </div>
                                @foreach (var brand in Model.AvailableBrands)
                                {
                                    if (!string.IsNullOrEmpty(brand))
                                    {
                                        <div class="form-check">
                                            <input class="form-check-input brand-checkbox" type="checkbox" 
                                                   name="Brands" id="brand-@brand.GetHashCode()" value="@brand" 
                                                   @(Model.Brand == brand || (Model.Brands != null && Model.Brands.Contains(brand)) ? "checked" : "") data-filter="brand">
                                            <label class="form-check-label" for="brand-@brand.GetHashCode()">
                                                @brand
                                            </label>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Products Display (Right side) -->
        <div class="col-lg-9">
            <!-- Search and Sort Controls -->
            <div class="row mb-4">
                <div class="col-md-6 mb-3 mb-md-0">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search products..." 
                               id="searchInput" value="@Model.SearchTerm">
                        <div class="input-group-append">
                            <button class="btn btn-primary" id="searchButton" type="button">Search</button>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 d-flex justify-content-md-end align-items-center">
                    <span class="me-2">Sort by:</span>
                    <select class="form-select" id="sortSelect">
                        <option value="name" selected="@(Model.SortBy == "name")">Name</option>
                        <option value="price_asc" selected="@(Model.SortBy == "price_asc")">Price: Low to High</option>
                        <option value="price_desc" selected="@(Model.SortBy == "price_desc")">Price: High to Low</option>
                        <option value="newest" selected="@(Model.SortBy == "newest")">Newest</option>
                    </select>
                </div>
            </div>

            <!-- Products Grid -->
            <div id="productsContainer">
                <div class="row row-cols-1 row-cols-sm-2 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4">
                    @foreach (var product in Model.Products.Items)
                    {
                        <div class="col mb-4">
                            <partial name="_ProductCardPartial" model="product" />
                        </div>
                    }
                </div>

                <!-- Pagination -->
                <div class="d-flex justify-content-between align-items-center mt-4">
                    <p class="text-muted mb-0">
                        Showing @((Model.PageIndex - 1) * 24 + 1)-@(Math.Min(Model.PageIndex * 24, Model.TotalProducts)) 
                        of @Model.TotalProducts products
                    </p>
                    <nav>
                        <ul class="pagination">
                            <li class="page-item @(!Model.Products.HasPreviousPage ? "disabled" : "")">
                                <a class="page-link" href="#" data-page="@(Model.PageIndex - 1)" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                            
                            @{
                                var startPage = Math.Max(1, Model.PageIndex - 2);
                                var endPage = Math.Min(Model.Products.TotalPages, Model.PageIndex + 2);
                            }
                            
                            @for (var i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                                    <a class="page-link" href="#" data-page="@i">@i</a>
                                </li>
                            }
                            
                            <li class="page-item @(!Model.Products.HasNextPage ? "disabled" : "")">
                                <a class="page-link" href="#" data-page="@(Model.PageIndex + 1)" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/14.7.0/nouislider.min.js"></script>
    <script>
        $(document).ready(function() {
            // Initialize price slider
            const priceSlider = document.getElementById('price-slider');
            const minPrice = @Model.LowestPrice.ToString(CultureInfo.InvariantCulture);
            const maxPrice = @Html.Raw(Model.HighestPrice.ToString(CultureInfo.InvariantCulture));
            const currentMinPrice = @Model.MinPrice?.ToString(CultureInfo.InvariantCulture);
            const currentMaxPrice = @Model.MaxPrice?.ToString(CultureInfo.InvariantCulture);
            
            if (priceSlider) {
                noUiSlider.create(priceSlider, {
                    start: [currentMinPrice, currentMaxPrice],
                    connect: true,
                    range: {
                        'min': minPrice,
                        'max': maxPrice
                    },
                    format: {
                        to: function(value) {
                            return Math.round(value);
                        },
                        from: function(value) {
                            return Math.round(value);
                        }
                    }
                });
                
                // Update input fields when slider changes
                priceSlider.noUiSlider.on('update', function(values, handle) {
                    const value = values[handle];
                    if (handle === 0) {
                        document.getElementById('minPrice').value = value;
                    } else {
                        document.getElementById('maxPrice').value = value;
                    }
                });
                
                // Update slider when input fields change
                document.getElementById('minPrice').addEventListener('change', function() {
                    priceSlider.noUiSlider.set([this.value, null]);
                });
                
                document.getElementById('maxPrice').addEventListener('change', function() {
                    priceSlider.noUiSlider.set([null, this.value]);
                });
            }
            
            // Category toggle (collapse/expand)
            $(document).on('click', '.category-toggle', function() {
                $(this).toggleClass('collapsed');
                $(this).closest('.category-item').find('> .subcategories').slideToggle(200);
            });
            
            // Handle category checkboxes
            $(document).on('change', '.category-checkbox', function() {
                const isChecked = $(this).prop('checked');
                const categoryId = $(this).data('category-id');
                const hasChildren = $(this).data('has-children') === 'true';
                
                // If a parent is checked, check all children
                if (isChecked && hasChildren) {
                    $(this).closest('.category-item').find('.subcategories .category-checkbox').prop('checked', true);
                }
                
                // If a parent is unchecked, uncheck all children
                if (!isChecked && hasChildren) {
                    $(this).closest('.category-item').find('.subcategories .category-checkbox').prop('checked', false);
                }
                
                // If a child is checked, check all parent categories
                if (isChecked) {
                    checkParentCategories($(this));
                }
                
                // If all siblings are unchecked, uncheck the parent
                if (!isChecked) {
                    uncheckParentIfAllSiblingsUnchecked($(this));
                }
                
                // Submit form to apply filters
                submitForm();
            });
            
            // Function to check all parent categories
            function checkParentCategories($checkbox) {
                const parentId = $checkbox.data('parent-id');
                if (parentId) {
                    const $parentCheckbox = $('input[data-category-id="' + parentId + '"]');
                    if ($parentCheckbox.length && !$parentCheckbox.prop('checked')) {
                        $parentCheckbox.prop('checked', true);
                        checkParentCategories($parentCheckbox);
                    }
                }
            }
            
            // Function to uncheck parent if all siblings are unchecked
            function uncheckParentIfAllSiblingsUnchecked($checkbox) {
                const parentId = $checkbox.data('parent-id');
                if (parentId) {
                    const $parentCheckbox = $('input[data-category-id="' + parentId + '"]');
                    const $siblingCheckboxes = $('input[data-parent-id="' + parentId + '"]');
                    const allSiblingsUnchecked = $siblingCheckboxes.toArray().every(cb => !$(cb).prop('checked'));
                    
                    if (allSiblingsUnchecked && $parentCheckbox.prop('checked')) {
                        $parentCheckbox.prop('checked', false);
                        uncheckParentIfAllSiblingsUnchecked($parentCheckbox);
                    }
                }
            }
            
            // Ensure all subcategories are initially visible for checked parent categories
            $('.category-checkbox:checked').each(function() {
                $(this).closest('.category-item').parents('.subcategories').show();
                $(this).closest('.category-item').find('> .subcategories').show();
                $(this).closest('.category-item').parents('.category-item').find('> div > .category-toggle').removeClass('collapsed');
            });
            
            // Handle brand checkboxes
            $(document).on('change', '.brand-checkbox', function() {
                const isChecked = $(this).prop('checked');
                const isAll = $(this).data('is-all') === true;
                
                if (isAll && isChecked) {
                    // If "All Brands" is checked, uncheck all other brand checkboxes
                    $('.brand-checkbox:not(#brandAll)').prop('checked', false);
                } else if (!isAll && isChecked) {
                    // If any other brand is checked, uncheck "All Brands"
                    $('#brandAll').prop('checked', false);
                }
                
                // If no brands are checked, check "All Brands" by default
                if ($('.brand-checkbox:checked').length === 0) {
                    $('#brandAll').prop('checked', true);
                }
                
                // Submit form to apply filters
                submitForm();
            });
            
            // Toggle filter sidebar on mobile
            $('#toggleFilter').click(function() {
                $('#filterContent').toggleClass('show');
                const toggleText = $('#filterContent').hasClass('show') ? 'Hide Filters' : 'Show Filters';
                $('.toggle-text').text(toggleText);
                $(this).find('i').toggleClass('fa-chevron-down fa-chevron-up');
            });
            
            // Reset all filters
            $('#resetFilters').click(function() {
                $('#filterForm')[0].reset();
                if (priceSlider) {
                    priceSlider.noUiSlider.set([minPrice, maxPrice]);
                }
                submitForm();
            });
            
            // Auto-submit form when checkboxes, radio buttons, or dropdown change
            $('.filter-radio, #brandFilter').change(function() {
                submitForm();
            });
            
            // Apply price filter button
            $('#applyPriceFilter').click(function() {
                submitForm();
            });
            
            // Search button
            $('#searchButton').click(function() {
                const searchTerm = $('#searchInput').val();
                $('#filterForm').append('<input type="hidden" name="SearchTerm" value="' + searchTerm + '">');
                submitForm();
            });
            
            // Enter key in search input
            $('#searchInput').keypress(function(e) {
                if (e.which === 13) {
                    $('#searchButton').click();
                    return false;
                }
            });
            
            // Sort select change
            $('#sortSelect').change(function() {
                $('input[name="SortBy"]').val($(this).val());
                submitForm();
            });
            
            // Pagination click
            $(document).on('click', '.pagination .page-link', function(e) {
                e.preventDefault();
                const page = $(this).data('page');
                if (page) {
                    $('input[name="PageIndex"]').val(page);
                    submitForm();
                }
            });
            
            // Add to cart functionality
            $(document).on('click', '.add-to-cart-btn', function() {
                const productId = $(this).data('product-id');
                const quantity = 1; // Default quantity
                
                $.ajax({
                    url: '/Products/Index?handler=AddToCart',
                    type: 'POST',
                    data: {
                        productId: productId,
                        quantity: quantity
                    },
                    headers: {
                        RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            // Show success toast or message
                            alert(response.message);
                        }
                    },
                    error: function() {
                        alert('Error adding product to cart');
                    }
                });
            });
            
            // Function to submit filter form with AJAX
            function submitForm() {
                const formData = $('#filterForm').serialize();
                const searchTerm = $('#searchInput').val();
                const fullData = formData + '&SearchTerm=' + encodeURIComponent(searchTerm);
                
                // Update URL with new params for bookmarking
                const newUrl = window.location.pathname + '?' + fullData;
                history.pushState({}, '', newUrl);
                
                // AJAX request to load filtered products
                $.ajax({
                    url: '/Products/Index?handler=Filter',
                    type: 'GET',
                    data: fullData,
                    success: function(data) {
                        $('#productsContainer').html($(data).find('#productsContainer').html());
                    },
                    error: function() {
                        alert('Error loading products');
                    }
                });
            }
        });
    </script>
}