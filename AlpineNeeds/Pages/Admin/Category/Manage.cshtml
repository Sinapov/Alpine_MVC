@page "{id:int?}"
@model AlpineNeeds.Pages.Admin.Category.ManageModel
@{
    var isEdit = Model.Category?.Id > 0;
    ViewData["Title"] = isEdit ? "Edit Category" : "Create Category";
}

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h2>@(isEdit ? "Edit" : "Create") Category</h2>
        </div>
    </div>
    
    <div class="row">
        <div class="col-md-6">
            <form method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                @if (isEdit)
                {
                    <input type="hidden" asp-for="Category.Id" />
                    <input type="hidden" asp-for="Category.DisplayOrder" />
                }
                
                <div class="mb-3">
                    <label asp-for="Category.Name" class="form-label">Name</label>
                    <input asp-for="Category.Name" class="form-control" />
                    <span asp-validation-for="Category.Name" class="text-danger"></span>
                </div>
                
                <div class="mb-3">
                    <label asp-for="Category.ParentCategoryId" class="form-label">Parent Category</label>
                    <select asp-for="Category.ParentCategoryId" class="form-select" 
                            asp-items="@Model.ParentCategoryItems">
                        <option value="">-- None (Top Level Category) --</option>
                    </select>
                    <span asp-validation-for="Category.ParentCategoryId" class="text-danger"></span>
                </div>
                
                <div class="d-flex justify-content-between">
                    <a asp-page="./Index" class="btn btn-secondary">Back to List</a>
                    <button type="submit" class="btn btn-primary">@(isEdit ? "Save Changes" : "Create")</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}