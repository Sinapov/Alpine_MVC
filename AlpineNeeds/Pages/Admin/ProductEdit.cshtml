@page "{id?}"
@model ProductEditModel
@{
    ViewData["Title"] = Model.IsNewProduct ? "Add Product" : "Edit Product";
}

<div class="container">

    <div class="mb-3">
        <partial name="_StatusMessage" />
    </div>

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>@(Model.IsNewProduct ? "Add Product" : "Edit Product")</h2>
        <a asp-page="./Products"
            class="btn btn-secondary">
            <i class="bi bi-arrow-left me-2"></i>Back to Products
        </a>
    </div>

    <div class="card">
        <div class="card-body">
            <form method="post" id="productForm" class="needs-validation" enctype="multipart/form-data" novalidate>
                <input type="hidden"
                    asp-for="Product.Id" />
                <div class="mb-3">
                    <label asp-for="Product.Name"
                        class="form-label"></label>
                    <input asp-for="Product.Name"
                        class="form-control"
                        minlength="2"
                        maxlength="100"
                        required>
                    <span asp-validation-for="Product.Name"
                        class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="Product.Description"
                        class="form-label"></label>
                    <textarea asp-for="Product.Description"
                        class="form-control"
                        maxlength="500"></textarea>
                    <span asp-validation-for="Product.Description"
                        class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="Product.CategoryId"
                        class="form-label"></label>
                    <select asp-for="Product.CategoryId"
                        asp-items="@(new SelectList(Model.Categories, "Id", "Name"))"
                        class="form-select"
                        required>
                        <option value="">Select a category</option>
                    </select>
                    <span asp-validation-for="Product.CategoryId"
                        class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="Product.Price"
                        class="form-label"></label>
                    <input asp-for="Product.Price"
                        class="form-control"
                        type="number"
                        step="0.01"
                        min="0.01"
                        max="100000"
                        required>
                    <span asp-validation-for="Product.Price"
                        class="text-danger"></span>
                </div>
                
                <!-- New Properties -->
                <div class="mb-3">
                    <label asp-for="Product.StockQuantity" class="form-label">Stock Quantity</label>
                    <input asp-for="Product.StockQuantity"
                        class="form-control"
                        type="number"
                        min="0"
                        required>
                    <span asp-validation-for="Product.StockQuantity"
                        class="text-danger"></span>
                </div>
                
                <div class="mb-3">
                    <label asp-for="Product.Brand" class="form-label">Brand</label>
                    <input asp-for="Product.Brand"
                        class="form-control"
                        maxlength="100">
                    <span asp-validation-for="Product.Brand"
                        class="text-danger"></span>
                </div>

                <div class="mb-3 form-check">
                    <input asp-for="Product.IsFeatured" class="form-check-input" type="checkbox">
                    <label asp-for="Product.IsFeatured" class="form-check-label">Featured Product</label>
                    <div class="form-text">Featured products will be displayed on the home page carousel</div>
                </div>
                
                <!-- End New Properties -->
                
                <div class="mb-3">
                    <label class="form-label">Colors (Optional)</label>
                    <div class="input-group">
                        <input type="text"
                            class="form-control"
                            id="colorInput">
                        <button type="button"
                            class="btn btn-outline-secondary"
                            onclick="addColor()">Add</button>
                    </div>
                    <div id="colorsList"
                        class="mt-2"></div>
                    <div id="colorsContainer"></div>
                    <div class="form-text">Add product color options if applicable (e.g., Red, Blue, Black)</div>
                </div>
                <div class="mb-3">
                    <label class="form-label">Sizes (Optional)</label>
                    <div class="input-group">
                        <input type="text"
                            class="form-control"
                            id="sizeInput">
                        <button type="button"
                            class="btn btn-outline-secondary"
                            onclick="addSize()">Add</button>
                    </div>
                    <div id="sizesList"
                        class="mt-2"></div>
                    <div id="sizesContainer"></div>
                    <div class="form-text">Add product size options if applicable (e.g., S, M, L, XL)</div>
                </div>

                <!-- Image Upload Section -->
                <div class="mb-3">
                    <label class="form-label">Product Images</label>
                    <div class="input-group">
                        <input type="file" 
                               class="form-control" 
                               name="ProductImages" 
                               id="productImageInput" 
                               accept="image/*" 
                               multiple>
                        <label class="input-group-text" for="productImageInput">Upload</label>
                    </div>
                    <div class="form-text">Upload multiple product images (max 10 files, 5MB each)</div>
                </div>

                <!-- Existing Images Display and Management -->
                @if (Model.Product?.ProductImages?.Any() == true)
                {
                    <div class="mb-4">
                        <h5>Manage Existing Images</h5>
                        <p class="text-muted small">Drag images to reorder them. First image will be the main product image.</p>
                        
                        <div id="imageGallery" class="d-flex flex-wrap gap-3">
                            @foreach (var image in Model.Product.ProductImages)
                            {
                                <div class="card image-card" data-id="@image.Id">
                                    <div class="position-relative">
                                        <img src="@image.ImageUrl" class="card-img-top" style="height: 150px; object-fit: cover;">
                                        <div class="position-absolute top-0 end-0 p-2">
                                            <button type="button" class="btn btn-sm btn-danger image-delete-btn"
                                                    data-id="@image.Id" title="Delete Image">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-footer text-center bg-light">
                                        <i class="bi bi-arrows-move" title="Drag to reorder"></i>
                                        <span class="ms-2 small text-muted">ID: @image.Id</span>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        <!-- Hidden inputs for image management -->
                        <div id="imageOrderContainer"></div>
                        <div id="imageDeleteContainer"></div>
                    </div>
                }

                <div class="d-flex justify-content-end gap-2 mt-4">
                    <a asp-page="./Products"
                        class="btn btn-secondary">Cancel</a>
                    <button type="submit"
                        class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script>
        let colors = @Json.Serialize(Model.Product?.Colors ?? new List<string>());
        let sizes = @Json.Serialize(Model.Product?.Sizes ?? new List<string>());
        let imagesToDelete = [];
        let currentImageOrder = [];

        function updateColorsList() {
            const colorsContainer = document.getElementById('colorsContainer');
            colorsContainer.innerHTML = '';
            colors.forEach((color, index) => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'Product.Colors';
                input.value = color;
                colorsContainer.appendChild(input);
            });

            const colorsList = document.getElementById('colorsList');
            colorsList.innerHTML = colors.map((color, index) => `
                    <span class="badge bg-primary me-2 mb-2">
                        ${color}
                        <button type="button" class="btn-close btn-close-white" 
                                aria-label="Remove" onclick="removeColor(${index})"></button>
                    </span>
                `).join('');
        }

        function updateSizesList() {
            const sizesContainer = document.getElementById('sizesContainer');
            sizesContainer.innerHTML = '';
            sizes.forEach((size, index) => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'Product.Sizes';
                input.value = size;
                sizesContainer.appendChild(input);
            });

            const sizesList = document.getElementById('sizesList');
            sizesList.innerHTML = sizes.map((size, index) => `
                    <span class="badge bg-primary me-2 mb-2">
                        ${size}
                        <button type="button" class="btn-close btn-close-white" 
                                aria-label="Remove" onclick="removeSize(${index})"></button>
                    </span>
                `).join('');
        }

        function addColor() {
            const colorInput = document.getElementById('colorInput');
            const color = colorInput.value.trim();
            if (color && !colors.includes(color)) {
                colors.push(color);
                colorInput.value = '';
                updateColorsList();
            }
        }

        function addSize() {
            const sizeInput = document.getElementById('sizeInput');
            const size = sizeInput.value.trim();
            if (size && !sizes.includes(size)) {
                sizes.push(size);
                sizeInput.value = '';
                updateSizesList();
            }
        }

        function removeColor(index) {
            colors.splice(index, 1);
            updateColorsList();
        }

        function removeSize(index) {
            sizes.splice(index, 1);
            updateSizesList();
        }

        // Image management functions
        function initializeImageManagement() {
            // Initialize Sortable for drag-and-drop reordering
            const gallery = document.getElementById('imageGallery');
            if (gallery) {
                Sortable.create(gallery, {
                    animation: 150,
                    onEnd: function() {
                        updateImageOrder();
                    }
                });
            }

            // Set up delete image buttons
            document.querySelectorAll('.image-delete-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const imageId = this.dataset.id;
                    markImageForDeletion(imageId);
                });
            });

            // Initialize the current image order
            updateImageOrder();
        }

        function updateImageOrder() {
            const gallery = document.getElementById('imageGallery');
            if (!gallery) return;
            
            // Get the current order of images
            currentImageOrder = Array.from(gallery.querySelectorAll('.image-card'))
                .map(card => parseInt(card.dataset.id));
            
            // Update hidden inputs for form submission
            const orderContainer = document.getElementById('imageOrderContainer');
            orderContainer.innerHTML = '';

            currentImageOrder.forEach(id => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'ImageDisplayOrder';
                input.value = id;
                orderContainer.appendChild(input);
            });
        }

        function markImageForDeletion(imageId) {
            if (!imagesToDelete.includes(imageId)) {
                imagesToDelete.push(imageId);
            }

            // Visually mark the image as deleted
            const imageCard = document.querySelector(`.image-card[data-id="${imageId}"]`);
            if (imageCard) {
                imageCard.classList.add('opacity-50');
                imageCard.style.borderColor = 'red';
            }

            updateDeleteInputs();
        }

        function updateDeleteInputs() {
            const deleteContainer = document.getElementById('imageDeleteContainer');
            deleteContainer.innerHTML = '';

            imagesToDelete.forEach(id => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'ImageIdsToDelete';
                input.value = id;
                deleteContainer.appendChild(input);
            });
        }

        // Initialize components on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateColorsList();
            updateSizesList();
            initializeImageManagement();
        });
    </script>

    <style>
        .image-card {
            width: 200px;
            transition: all 0.3s ease;
            cursor: move;
        }
        
        .image-delete-btn {
            opacity: 0.7;
        }
        
        .image-delete-btn:hover {
            opacity: 1;
        }
    </style>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
